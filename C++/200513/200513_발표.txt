1번째 발표자 : 전은서

목소리가 작아서 잘 안들렸다..
각각의 매니저 별로 배열과 카운트 변수를 하나 만들었다.

나의 경우에는 커다란 리스트에 무분별하게 저장해서 한개씩 꺼내서 쓰는 방법을 이용했다면
발표자의 경우 저장을 할때부터 3개의 배열을 이용해 구분지어 저장해주는 모습이다.

삭제를 할때에 배열을 이용해서 삭제를 해주고 뒤에 데이터를 앞으로 땡겨주어야 하는 모습을 보여줬다.
delete구문의 위치가 2개의 반복문을 돌며 index값인 i값이 증가해 결국 가장 마지막 데이터만 지워지는 형태로 되어있었다.
delete의 위치가 첫번째 반복문을 돌아 찾은뒤 먼저 삭제를 하고 땡겨주는것이 좋을거같다.
구현을 해놓고 사용을 안해보았다는것이 아쉬웠다.

CManager에 데이터베이스매니저를 생성해서 한개만 만들어 져야 하지만, 각각의 상속을 받아 총 3개가 만들어지게 된다.
CManager에서 static으로 선언해서 한개만 생성되어 공유되게끔 해주는것이 좋다.
나도 이부분에서 static을 안넣고 그냥 선언해서 총 3개가 되었던것 같다.

2번째 발표자 : 정지원

첫번째 발표자 처럼 3개 학과의 학생을 저장할 3개의 배열을 선언해서 리스트처럼 사용했다.
학과별 학생수 카운트를 외부에서 하는것이 아닌 내부에서 관리하게끔 하는것이 좋다.

생성자에서 new해줄것은 없다.
배열을 사용했기 때문에 배열을 클리어 해주기만 하면된다.
리스트배열을 클리어 해주는 부분이 없었다.
나의 경우에는 아예 처음부터 리스트로 만들어서 이부분이 필요없었다.

데이터베이스안에서 모든데이터가 리스트인지 배열인지 외부에서 몰라야 한다.
과목을 출력해주기 위해서 배열의 포인터를 넘겨주었는데, 외부에서 받았을때 배열의 포인터인것을 인지하고
프로그래밍 하기 때문에 데이터 베이스가 수정되면 외부의 코드도 수정될 가능성이 높다.
그렇기 때문에 최대한 외부에 보여지지 않게끔 진행되어야 한다.

몇번째에 넣겠다 라고 코딩을 했다면 인덱스값이 필요하지만 굳이 제일 끝에 차곡차곡 넣는다면 
인덱스값이 필요가 없다.

학과 코드를 기호상수로 정의를 해서 사용했으면 더 가독성이 좋았을것이다.
발표자의 경우 0, 1, 2로 표현해서 이것을 보고 조금 생각을 해보아야 코드를 이해할수 있었다.
 

