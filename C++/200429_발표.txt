조남혁 (2회차)
연산자 오버로딩은 좋으나 지금 이상황은 조금 안맞는다.
== 연산자 오버로딩을 통해 두 유저 객체를 비교할때 객채들의 ID, PW 모두 같으면 괜찮지만
주어진 실행코드에서 아이디나 패스워드 각각 하나만 틀릴경우 실행결과가 달라진다.
어쨋든 구현은 좋으나 바깥에서 다르게 연산을 하게된다. 그래서 외부의 코드가 가독성이 떨어진다.
클래스 간의 비교에서 == 연산자 오버로딩은 자주 쓰는 일이어서 시도는 좋았다고 생각한다.

함수의 이름에 Get, Set 등의 직관적인 단어선택이 필요하다. 
Check같은 경우 무엇을 체크하는지 잘 모를수 있으니 단어를 통해 딱봐서 알수 있게끔 단어선택을 한다.

함수에 대한 성격을 제대로 파악하는것이 중요하다. Run 함수에서 실패, 성공을 명확하게 정의 할수 있는 함수가 아니어서
bool 형을 반환하는 것은 잘못된 판단이다.
무언가 오류가 있어 종료되든, 정상적으로 종료되든 전체를 돌리는 것이기 때문에 성공, 실패라고 말할순 없다.
이런 비슷한 종류에 함수들은 반환형을 void로 사용한다. 많은 프로그래머들이 사용하는 방법을 따라가는것이 좋다.

우리가 일반적으로 객체 만들때 임시로 쓸경우가 아닌, 저장을 통해 객체를 이용할 경우
포인터형을 이용해 동적할당을 해주어 관리한다. 시작과 끝을 프로그래머가 관리하는 경우 동적할당이 좋다.

나의 경우에는 포인터형으로 사용해서 check 함수에서 비교하는 부분에서 애를 많이 먹었다.
주소값을 서로 비교하니 같을 수가 없다는것을 간과하고 있었다. 
