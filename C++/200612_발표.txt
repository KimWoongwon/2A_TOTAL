1번째 발표자 : 성원식

기존의 로그인 시스템을 활용해서 User가 캐릭터를 가지는 방향으로 구현했다.
펫을 만드는 부분을 캐릭터에서 가상함수로 구현해주었다. 
캐릭터를 상속받아서 종족을 정해주는 클래스를 각자 다 만들어주었다.
펫도 생성할때 팩토리 패턴으로 구현해서 만들수 있게끔 해주었다
그러니까 팩토리 패턴 2개를 사용해서 하나는 캐릭터를 만들고 하나는 펫을 만들수 있게끔 해주었다.

발표자는 캐릭터 팩토리를 조금 축소하고 펫 팩토리를 조금 더 크게 만든것 같다.
하지만 교수님이 원하셨던것은 캐릭터 팩토리를 종족별로 해서 이부분을 중점으로 두고 
펫 부분은 그저 이름만 가지는것으로 원하신것같다.

나는 그냥 펫이 하는 기능이 없기 때문에 그저 이름만 가지는 구조체로 해서 
종족팩토리에서 그저 펫을 가질수 있게끔 해주었다.
그래서 나는 팩토리 패턴이 그냥 하나이고 펫을 구조체로 구현해서 사용했다.

발표자가 만든 팩토리는 종족별 차이가 별 없고 펫이 더 중요하다면 꽤나 괜찮은것 같다.
발표자의 팩토리 패턴 적용방식은 꽤나 좋았다. 
유저안에서 캐릭터를 만들고 이부분에서 팩토리 패턴이 적용되었는데 이부분은 분리 해주는것이 좋을것같다.
또한 팩토리를 만들고 넣어주고 삭제하는 부분은 팩토리 클래스를 싱글톤으로 만들어 주는것이 좋다.
유저가 팩토리에서 가져다가 쓰는것 보단 중간관리자의 역할을 하는 매니저를 하나 만들어서
유저와 팩토리를 연결하는것이 좋다.

2번째 발표자 : 조남혁 

세분화가 너무 많이 되서 이해하기 어려웠다.
펫을 가지는 캐릭터다 했을때 펫의 역할이 중요하고 각자가 다 다르다면 
펫 팩토리를 따로 만들어주는것이 마땅하다. 하지만 펫의 역할이 크게 다르지않고
조금의 차이만 있다면 팩토리 패턴을 적용하지 않는것이 좋다. 

팩토리 패턴의 단점은 하나하나씩 추가하다보면 클래스가 많아진다는 단점이 있다.
팩토리 패턴을 만들때 너무 팩토리의 갯수가 많아지지 않게 조절하는것이 중요하다.

