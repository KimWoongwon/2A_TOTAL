#include <windows.h>
#include <math.h>
#include "resource.h"
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
HINSTANCE g_hInst;
HWND hWndMain;
LPCTSTR lpszClass = TEXT("김웅원_16032020");

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance
	, LPSTR lpszCmdParam, int nCmdShow)
{
	HWND hWnd;
	MSG Message;
	WNDCLASS WndClass;
	g_hInst = hInstance;

	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hInstance = hInstance;
	WndClass.lpfnWndProc = WndProc;
	WndClass.lpszClassName = lpszClass;
	WndClass.lpszMenuName = NULL;
	WndClass.style = CS_HREDRAW | CS_VREDRAW;
	RegisterClass(&WndClass);

	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
		NULL, (HMENU)NULL, hInstance, NULL);
	ShowWindow(hWnd, nCmdShow);

	while (GetMessage(&Message, NULL, 0, 0)) {
		TranslateMessage(&Message);
		DispatchMessage(&Message);
	}
	return (int)Message.wParam;
}

void DrawBitmap(HDC hdc, int x, int y, HBITMAP hbit)
{
	HDC MemoryDC;
	int BitmapX, BitmapY;
	BITMAP Bitmap_;
	HBITMAP OldBitmap;
	MemoryDC = CreateCompatibleDC(hdc);
	OldBitmap = (HBITMAP)SelectObject(MemoryDC, hbit);

	GetObject(hbit, sizeof(BITMAP), &Bitmap_);
	BitmapX = Bitmap_.bmWidth;
	BitmapY = Bitmap_.bmHeight;

	TransparentBlt(hdc, x, y, BitmapX, BitmapY, MemoryDC, 0, 0, BitmapX, BitmapY, RGB(255, 255, 255));
	//BitBlt(hdc, x, y, BitmapX, BitmapY, MemoryDC, 0, 0, SRCCOPY);
	SelectObject(MemoryDC, OldBitmap);
	DeleteDC(MemoryDC);
}
LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	static HDC hdc, BACKDC;
	static PAINTSTRUCT ps;
	static HBITMAP backBitmap, OldBackBitmap;
	static int x = 100;
	static int y = 100;
	static RECT rect;
	static POINT MousePos, temp;
	static POINT BitPos;
	static HBITMAP Bitmap1 = LoadBitmap(g_hInst, MAKEINTRESOURCE(IDB_BITMAP1));
	static BITMAP Bitmap_;
	static bool isClicked, onlyX, onlyY;
	//RECT rect;
	//POINT pt;
	//PtInRect(&rect, pt);
	////rect 안에 pt가 있는지 체크해주는 함수


	switch (iMessage) {
	case WM_CREATE:
		BitPos.x = 0;
		BitPos.y = 0;
		GetObject(Bitmap1, sizeof(BITMAP), &Bitmap_);
		isClicked = false;
		onlyX = false;
		onlyY = false;
		GetClientRect(hWnd, &rect);
		break;
	case WM_LBUTTONDOWN:
		MousePos.x = LOWORD(lParam);
		MousePos.y = HIWORD(lParam);
		temp = MousePos;
		if (MousePos.x > BitPos.x && MousePos.x < BitPos.x + Bitmap_.bmWidth && MousePos.y > BitPos.y && MousePos.y < BitPos.y + Bitmap_.bmHeight)
		{
			BitPos.x = MousePos.x - Bitmap_.bmWidth / 2;
			BitPos.y = MousePos.y - Bitmap_.bmHeight / 2;
			
			
			isClicked = true;
		}
		
		break;
	case WM_MOUSEMOVE:
		if (isClicked)
		{
			MousePos.x = LOWORD(lParam);
			MousePos.y = HIWORD(lParam);
			if (GetAsyncKeyState(VK_SHIFT) & 0x8000)
			{
				if (abs(temp.x - MousePos.x) >= abs(temp.y - MousePos.y))
					onlyX = true;
				else if (abs(temp.x - MousePos.x) <= abs(temp.y - MousePos.y))
					onlyY = true;
				if (!onlyY)
					BitPos.x = MousePos.x - Bitmap_.bmWidth / 2;
				if (!onlyX)
					BitPos.y = MousePos.y - Bitmap_.bmHeight / 2;
			}
			else
			{
				BitPos.x = MousePos.x - Bitmap_.bmWidth / 2;
				BitPos.y = MousePos.y - Bitmap_.bmHeight / 2;
			}
			
		}
		
		InvalidateRect(hWnd, NULL, FALSE);
		break;
	case WM_LBUTTONUP:
		isClicked = false;
		onlyX = false;
		onlyY = false;
		break;
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);

		BACKDC = CreateCompatibleDC(hdc);
		backBitmap = CreateCompatibleBitmap(hdc, rect.right, rect.bottom);
		OldBackBitmap = (HBITMAP)SelectObject(BACKDC, backBitmap);

		PatBlt(BACKDC, 0, 0, rect.right, rect.bottom, WHITENESS);

		DrawBitmap(BACKDC, BitPos.x, BitPos.y, Bitmap1);

		BitBlt(hdc, 0, 0, rect.right, rect.bottom, BACKDC, 0, 0, SRCCOPY);
		
		SelectObject(BACKDC, OldBackBitmap);
		DeleteDC(BACKDC);
		DeleteObject(backBitmap);
		EndPaint(hWnd, &ps);
		return 0;
	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;
	}

	return(DefWindowProc(hWnd, iMessage, wParam, lParam));
}